<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
      version="3.1">
  <display-name>Bigdata</display-name>
  <description>Bigdata</description>
  <context-param>
   <description>The property file (for a standalone database instance) or the
   jini configuration file (for a federation).  The file MUST end with either
   ".properties" or ".config".  This path is relative to the directory from
   which you start the servlet container so you may have to edit it for your
   installation, e.g., by specifying an absolution path.  Also, it is a good
   idea to review the RWStore.properties file as well and specify the location
   of the database file on which it will persist your data.

   Note: You MAY override this parameter using
   "-Dcom.bigdata.rdf.sail.webapp.ConfigParams.propertyFile=FILE"
   when starting the servlet container.
   </description>
   <!-- Note: This path is relative to the directory in which you start -->
   <!-- the servlet container or within the classpath as a resource.    -->
   <!-- For the IDE, this is generally the root  -->
   <!-- of the bigdata project. For the WAR, it depends where you start -->
   <!-- the servlet container. The "ant war" target rewrites this to be -->
   <!-- relative to the root of the servlet container by default.       -->
   <param-name>propertyFile</param-name>
   <param-value>RWStore.properties</param-value>
  </context-param>
  <context-param>
   <description>The default bigdata namespace of for the triple or quad store
   instance to be exposed.</description>
   <param-name>namespace</param-name>
   <param-value>wdq</param-value>
  </context-param>
  <context-param>
   <description>When true a new triple or quads store instance will be created
   if none is found at that namespace.</description>
   <param-name>create</param-name>
   <param-value>true</param-value>
  </context-param>
  <context-param>
   <description>The size of the thread pool used to service SPARQL queries -OR-
    ZERO (0) for an unbounded thread pool.</description>
   <param-name>queryThreadPoolSize</param-name>
   <param-value>32</param-value>
  </context-param>
  <context-param>
   <description>When true, the REST API will not permit mutation operations.</description>
   <param-name>readOnly</param-name>
   <param-value>false</param-value>
  </context-param>
  <context-param>
   <description>When non-zero, the timeout for queries (milliseconds).</description>
   <param-name>queryTimeout</param-name>
   <param-value>600000</param-value>
  </context-param>
  <context-param>
   <description>When non-zero, the timeout for the warmup period (milliseconds). The warmup period pulls in the non-leaf index pages and reduces the impact of sudden heavy query workloads on the disk and on GC.  The end points are not available during the warmup period.</description>
   <param-name>warmupTimeout</param-name>
   <param-value>0</param-value>
  </context-param>
  <context-param>
   <description>A list of the namespaces to be exercised during the warmup period (optional).  When the list is empty, all namespaces will be warmed up.</description>
   <param-name>warmupNamespaceList</param-name>
   <param-value></param-value>
  </context-param>
  <context-param>
   <description>The number of parallel threads to use for the warmup period.  At most one thread will be used per index.</description>
   <param-name>warmupThreadPoolSize</param-name>
   <param-value>20</param-value>
  </context-param>
  <!-- We can't use the builtin whitelist because it breaks label relation. But we enable our own whitelist so its all good. -->
   <!-- <context-param>
   <description>List of allowed services.</description>
   <param-name>serviceWhitelist</param-name>
   <param-value>http://www.bigdata.com/rdf/search#search,http://www.bigdata.com/rdf#describe</param-value>
  </context-param> -->
  <context-param>
   <description>The name of the class to use for the Blueprints Servlet instance</description>
   <param-name>blueprintsServletProvider</param-name>
   <param-value>com.bigdata.blueprints.webapp.BlueprintsServlet</param-value>
  </context-param>
  <listener>
   <listener-class>org.wikidata.query.rdf.blazegraph.WikibaseContextListener</listener-class>
  </listener>
  <filter>
      <filter-name>real-ip-filter</filter-name>
      <filter-class>org.wikidata.query.rdf.blazegraph.filters.ClientIPFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>real-ip-filter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <filter>
    <filter-name>mdc-inserting-filter</filter-name>
    <filter-class>ch.qos.logback.classic.helpers.MDCInsertingServletFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>mdc-inserting-filter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <filter>
      <filter-name>throttling-filter</filter-name>
      <filter-class>org.wikidata.query.rdf.blazegraph.throttling.ThrottlingFilter</filter-class>
      <init-param>
          <param-name>enable-throttling-if-header</param-name>
          <param-value>X-BIGDATA-READ-ONLY</param-value>
      </init-param>
  </filter>
  <filter-mapping>
    <filter-name>throttling-filter</filter-name>
    <url-pattern>/sparql</url-pattern>
    <url-pattern>/namespace</url-pattern>
    <url-pattern>/namespace/*</url-pattern>
  </filter-mapping>
  <servlet>
   <servlet-name>REST API</servlet-name>
   <display-name>REST API</display-name>
   <description>The REST API, including a SPARQL end point, as described at
   https://wiki.blazegraph.com/wiki/index.php/NanoSparqlServer
   </description>
   <servlet-class>com.bigdata.rdf.sail.webapp.RESTServlet</servlet-class>
   <load-on-startup>0</load-on-startup>
   <async-supported>true</async-supported>
  </servlet>
  <servlet>
   <servlet-name>Multi-Tenancy API</servlet-name>
   <display-name>Multi-Tenancy API</display-name>
   <description>The REST API for managing multiple KBs in a single Journal
   or Federation.
   </description>
   <servlet-class>com.bigdata.rdf.sail.webapp.MultiTenancyServlet</servlet-class>
   <async-supported>true</async-supported>
  </servlet>
  <servlet>
   <servlet-name>DataLoader</servlet-name>
   <display-name>DataLoader Servlet</display-name>
   <description>Servlet providing DataLoader functionality for bulk loading into
   a namespace.</description>
   <servlet-class>com.bigdata.rdf.sail.webapp.DataLoaderServlet</servlet-class>
   <async-supported>true</async-supported>
  </servlet>
  <servlet>
   <servlet-name>Transaction Management API</servlet-name>
   <display-name>Transaction Management API</display-name>
   <description>The REST API for managing transactions for a Journal.
   </description>
   <servlet-class>com.bigdata.rdf.sail.webapp.TxServlet</servlet-class>
   <async-supported>true</async-supported>
  </servlet>
  <servlet>
   <servlet-name>Status</servlet-name>
   <display-name>Status</display-name>
   <description>A status page.</description>
   <servlet-class>com.bigdata.rdf.sail.webapp.StatusServlet</servlet-class>
   <async-supported>true</async-supported>
  </servlet>
  <servlet>
   <servlet-name>Counters</servlet-name>
   <display-name>Performance counters</display-name>
   <description>Performance counters.</description>
   <servlet-class>com.bigdata.rdf.sail.webapp.CountersServlet</servlet-class>
   <async-supported>true</async-supported>
  </servlet>
  <servlet>
   <servlet-name>LDF API</servlet-name>
   <display-name>LDF API</display-name>
   <description>API implementing linked data fragments.</description>
   <servlet-class>org.wikidata.query.rdf.blazegraph.ldf.LDFServlet</servlet-class>
   <async-supported>true</async-supported>
   <init-param>
     <description>Configuration file for the LDF server.</description>
     <param-name>configFile</param-name>
     <param-value>ldf-config.json</param-value>
   </init-param>
  </servlet>
  <servlet>
    <servlet-name>ldfassets</servlet-name>
    <servlet-class>org.eclipse.jetty.servlet.DefaultServlet</servlet-class>
    <init-param>
        <param-name>relativeResourceBase</param-name>
        <param-value>/WEB-INF/classes/assets</param-value>
    </init-param>
      <init-param>
          <param-name>pathInfoOnly</param-name>
          <param-value>true</param-value>
      </init-param>
   </servlet>
  <!-- BEGIN: primary sources tool APIs -->
    <listener>
        <listener-class>org.wikidata.query.rdf.primarysources.common.CacheUpdater</listener-class>
    </listener>

    <filter>
        <filter-name>CORS-header-filter</filter-name>
        <filter-class>org.wikidata.query.rdf.primarysources.common.CorsHeaderFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>CORS-header-filter</filter-name>
        <url-pattern>/sparql</url-pattern>
        <url-pattern>/upload</url-pattern>
        <url-pattern>/update</url-pattern>
        <url-pattern>/suggest</url-pattern>
        <url-pattern>/curate</url-pattern>
        <url-pattern>/search</url-pattern>
        <url-pattern>/random</url-pattern>
        <url-pattern>/datasets</url-pattern>
        <url-pattern>/statistics</url-pattern>
        <url-pattern>/properties</url-pattern>
        <url-pattern>/values</url-pattern>
    </filter-mapping>

  <servlet>
    <servlet-name>Upload</servlet-name>
    <display-name>Upload</display-name>
    <description>Primary sources tool ingestion API upload service</description>
    <servlet-class>org.wikidata.query.rdf.primarysources.ingestion.UploadServlet</servlet-class>
    <async-supported>true</async-supported>
  </servlet>
    <servlet>
        <servlet-name>Update</servlet-name>
        <display-name>Update</display-name>
        <description>Primary sources tool ingestion API update service</description>
        <servlet-class>org.wikidata.query.rdf.primarysources.ingestion.UpdateServlet</servlet-class>
        <async-supported>true</async-supported>
    </servlet>
    <servlet>
        <servlet-name>Suggest</servlet-name>
        <display-name>Suggest</display-name>
        <description>Primary sources tool curation API suggest service</description>
        <servlet-class>org.wikidata.query.rdf.primarysources.curation.SuggestServlet</servlet-class>
        <async-supported>true</async-supported>
    </servlet>
    <servlet>
        <servlet-name>Curate</servlet-name>
        <display-name>Curate</display-name>
        <description>Primary sources tool curation API curate service</description>
        <servlet-class>org.wikidata.query.rdf.primarysources.curation.CurateServlet</servlet-class>
        <async-supported>true</async-supported>
    </servlet>
    <servlet>
        <servlet-name>Search</servlet-name>
        <display-name>Search</display-name>
        <description>Primary sources tool curation API search service</description>
        <servlet-class>org.wikidata.query.rdf.primarysources.curation.SearchServlet</servlet-class>
        <async-supported>true</async-supported>
    </servlet>
    <servlet>
        <servlet-name>Random</servlet-name>
        <display-name>Random</display-name>
        <description>Primary sources tool curation API random item service</description>
        <servlet-class>org.wikidata.query.rdf.primarysources.curation.RandomServlet</servlet-class>
        <async-supported>true</async-supported>
    </servlet>
    <servlet>
        <servlet-name>Datasets</servlet-name>
        <display-name>Datasets</display-name>
        <description>Primary sources tool curation API datasets list service</description>
        <servlet-class>org.wikidata.query.rdf.primarysources.curation.DatasetsServlet</servlet-class>
        <async-supported>true</async-supported>
    </servlet>
    <servlet>
        <servlet-name>Statistics</servlet-name>
        <display-name>Statistics</display-name>
        <description>Primary sources tool statistics API user and datasets statistics</description>
        <servlet-class>org.wikidata.query.rdf.primarysources.statistics.StatisticsServlet</servlet-class>
        <async-supported>true</async-supported>
    </servlet>
    <servlet>
        <servlet-name>Properties</servlet-name>
        <display-name>Properties</display-name>
        <description>Primary sources tool statistics API properties list service</description>
        <servlet-class>org.wikidata.query.rdf.primarysources.statistics.PropertiesServlet</servlet-class>
        <async-supported>true</async-supported>
    </servlet>
    <servlet>
        <servlet-name>Values</servlet-name>
        <display-name>Values</display-name>
        <description>Primary sources tool statistics API vlaues list service</description>
        <servlet-class>org.wikidata.query.rdf.primarysources.statistics.ValuesServlet</servlet-class>
        <async-supported>true</async-supported>
    </servlet>
  <!--END: primary sources tool APIs -->

  <!-- Note: The HALoadBalancerServlet is deployed from override-web.xml -->
  <!-- Serve anything under /html/* as a simple file. -->
  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>/html/*</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>ldfassets</servlet-name>
    <url-pattern>/assets/*</url-pattern>
  </servlet-mapping>
  <!-- Mapping for the default KB namespace (as configured above). -->
  <servlet-mapping>
  <servlet-name>REST API</servlet-name>
  <url-pattern>/sparql</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
  <servlet-name>LDF API</servlet-name>
  <url-pattern>/ldf</url-pattern>
  </servlet-mapping>
  <!-- Mapping for access to non-default KB namespaces.
  <servlet-mapping>
  <servlet-name>REST API</servlet-name>
  <url-pattern>/sparql/*</url-pattern>
  </servlet-mapping> -->
  <!-- Mappings for the multi-tenancy API. -->
  <servlet-mapping>
  <servlet-name>Multi-Tenancy API</servlet-name>
  <url-pattern>/namespace</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
  <servlet-name>Multi-Tenancy API</servlet-name>
  <url-pattern>/namespace/*</url-pattern>
  </servlet-mapping>
  <!-- Mappings for the DataLoader Servlet API. -->
  <servlet-mapping>
  <servlet-name>DataLoader</servlet-name>
  <url-pattern>/dataloader</url-pattern>
  </servlet-mapping>
  <!-- Mappings for the TX API. -->
  <servlet-mapping>
  <servlet-name>Transaction Management API</servlet-name>
  <url-pattern>/tx</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
  <servlet-name>Transaction Management API</servlet-name>
  <url-pattern>/tx/*</url-pattern>
  </servlet-mapping>
  <!-- Mapping for the status page. -->
  <servlet-mapping>
  <servlet-name>Status</servlet-name>
  <url-pattern>/status</url-pattern>
  </servlet-mapping>
  <!-- Mapping for the performance counters page. -->
  <servlet-mapping>
  <servlet-name>Counters</servlet-name>
  <url-pattern>/counters</url-pattern>
  </servlet-mapping>

  <!--BEGIN: primary sources tool APIs -->
  <servlet-mapping>
    <servlet-name>Upload</servlet-name>
    <url-pattern>/upload</url-pattern>
  </servlet-mapping>
    <servlet-mapping>
        <servlet-name>Update</servlet-name>
        <url-pattern>/update</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>Suggest</servlet-name>
        <url-pattern>/suggest</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>Curate</servlet-name>
        <url-pattern>/curate</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>Search</servlet-name>
        <url-pattern>/search</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>Random</servlet-name>
        <url-pattern>/random</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>Datasets</servlet-name>
        <url-pattern>/datasets</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>Statistics</servlet-name>
        <url-pattern>/statistics</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>Properties</servlet-name>
        <url-pattern>/properties</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>Values</servlet-name>
        <url-pattern>/values</url-pattern>
    </servlet-mapping>
  <!--END: primary sources tool APIs -->

  <!-- Map the initial request into the UI. -->
  <welcome-file-list>
    <welcome-file>html/index.html</welcome-file>
  </welcome-file-list>
</web-app>
